git init //生成.git文件，用来管理git仓库
git add README.md
git remote -v | --verbose 列出详细信息，在每一个名字后面列出其远程url
git remote add origin https://github.com/BrightMoonSong/sell.git  //添加远程仓库

git status     // 查看当前状态（查看本地分支文件信息，确保更新时不产生冲突）
git add .      // 添加到仓库
git commit -m "commit of description"       // 提交进仓库  -m 后面是说明，对提交文件的说明，不写的话容易报错，所以最好写上
git push origin master          // 提交进远程仓库，origin就是远程仓库的意思，这是git默认的，可以更改，第一次的话应该加上-u,git push -u origin master
git pull         // 若命令执行成功，则 更新代码 成功！

// 下面的命令暂时还没有用过
git checkout -- [file name] （若文件有修改，可以还原到最初状态; 若文件需要更新到服务器上，应该先merge到服务器，再更新到本地）
git branch（查看当前分支情况）列出所有分支
git checkout [remote branch](若分支为本地分支，则需切换到服务器的远程分支)

git diff 对比文件的差异
git log 显示提交记录
分支
git brach 分支名 创建分支
git checkout 分支名 切换分支
提交
git add 跟踪新文件或者已有文件的改动，或者用来解决冲突
git commit 把文件从stage提交到branch
删除
git rm 文件名 不但从stage中删除，同时删除物理文件

在另一台电脑上git clone下来这个项目后不需要git init 重新生成.git文件，可以直接git add .   git commit -m "shuoming"  git pushorigin master 提交进远程仓库就是github上面去

如果系统中有一些配置文件在服务器上做了配置修改,然后后续开发又新添加一些配置项的时候,
在发布这个配置文件的时候,会发生代码冲突:
error: Your local changes to the following files would be overwritten by merge:
        protected/config/main.php
Please, commit your changes or stash them before you can merge.
如果希望保留生产服务器上所做的改动,仅仅并入新配置项, 处理方法如下:
git stash
git pull
git stash pop
然后可以使用git diff -w +文件名 来确认代码自动合并的情况.

反过来,如果希望用代码库中的文件完全覆盖本地工作版本. 方法如下:
git reset --hard
git pull
其中git reset是针对版本,如果想针对文件回退本地修改,使用
[plain] view plain copy
git checkout HEAD file/to/restore  
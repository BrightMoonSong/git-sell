1.声明变量
  $brand-primary : darken(#428bca, 6.5%) !default; // #337ab7
  $btn-primary-color : #fff !default;
  $btn-primary-bg : $brand-primary !default;
  $btn-primary-border : darken($btn-primary-bg, 5%) !default;
  如果值后面加上!default则表示默认值。
    普通变量---------------------------------
  定义之后可以在全局范围内使用。
  $fontSize: 12px;
  body{
      font-size:$fontSize;
  }
    默认变量-----------------------------------
  sass 的默认变量仅需要在值后面加上 !default 即可。
  $baseLineHeight:1.5 !default;
  body{
      line-height: $baseLineHeight;
  }
  sass 的默认变量一般是用来设置默认值，然后根据需求来覆盖的，覆盖的方式也很简单，只需要在默认变量之前重新声明下变量即可。
  $baseLineHeight: 2;
  $baseLineHeight: 1.5 !default;
  body{
      line-height: $baseLineHeight;
  }
  编译后的css代码：
  body{
      line-height:2;
  }
2. 全局变量与局部变量
  //SCSS
  $color: orange !default;//定义全局变量(在选择器、函数、混合宏...的外面定义的变量为全局变量)
  .block {
    color: $color;//调用全局变量
  }
  em {
  $color: red;//定义局部变量
  a {
    color: $color;//调用局部变量
  }
  }
  span {
  color: $color;//调用全局变量
  }
  css 的结果：
  //CSS
  .block {
  color: orange;
  }
  em a {
  color: red;
  }
  span {
  color: orange;
  }
  上面的示例演示可以得知，在元素内部定义的变量不会影响其他元素。如此可以简单的理解成，全局变量就是定义在元素外面的变量，如下代码：
  $color:orange !default;
  $color 就是一个全局变量，而定义在元素内部的变量，比如 $color:red; 是一个局部变量。
  除此之外，Sass 现在还提供一个 !global 参数。!global 和 !default 对于定义变量都是很有帮助的。我们之后将会详细介绍这两个参数的使用以及其功能。
  全局变量的影子
  当在局部范围（选择器内、函数内、混合宏内...）声明一个已经存在于全局范围内的变量时，局部变量就成为了全局变量的影子。基本上，局部变量只会在局部范围内覆盖全局变量。
  上面例子中的 em 选择器内的变量 $color 就是一个全局变量的影子。
  //SCSS
  $color: orange !default;//定义全局变量
  .block {
  color: $color;//调用全局变量
  }
  em {
  $color: red;//定义局部变量（全局变量 $color 的影子）
  a {
    color: $color;//调用局部变量
  }
  }
  什么时候声明变量？
  我的建议，创建变量只适用于感觉确有必要的情况下。不要为了某些骇客行为而声明新变量，这丝毫没有作用。只有满足所有下述标准时方可创建新变量：
  该值至少重复出现了两次；
  该值至少可能会被更新一次；
  该值所有的表现都与变量有关（非巧合）。
  基本上，没有理由声明一个永远不需要更新或者只在单一地方使用变量。
3. 嵌套-选择器嵌套
  Sass 中还提供了选择器嵌套功能，但这也并不意味着你在 Sass 中的嵌套是无节制的，因为你嵌套的层级越深，编译出来的 CSS 代码的选择器层级将越深，
  这往往是大家不愿意看到的一点。这个特性现在正被众多开发者滥用。
  选择器嵌套为样式表的作者提供了一个通过局部选择器相互嵌套实现全局选择的方法，Sass 的嵌套分为三种：
    选择器嵌套
    属性嵌套
    伪类嵌套
  1、 选择器嵌套
  假设我们有一段这样的结构：
  <header>
  <nav>
      <a href=“##”>Home</a>
      <a href=“##”>About</a>
      <a href=“##”>Blog</a>
  </nav>
  <header>
  想选中 header 中的 a 标签，在写 CSS 会这样写：
  nav a {
    color:red;
  }

  header nav a {
    color:green;
  }
  那么在 Sass 中，就可以使用选择器的嵌套来实现：
  nav {
    a {
      color: red;

      header & {
        color:green;
      }
    }
  }
  2、 属性嵌套
  Sass 中还提供属性嵌套，CSS 有一些属性前缀相同，只是后缀不一样，比如：border-top/border-right，与这个类似的还有 margin、padding、font 等属性。
  假设你的样式中用到了：
  .box {
      border-top: 1px solid red;
      border-bottom: 1px solid green;
  }
  在 Sass 中我们可以这样写：
  .box {
    border: {
     top: 1px solid red;
     bottom: 1px solid green;
    }
  }
  3、 伪类嵌套
  其实伪类嵌套和属性嵌套非常类似，只不过他需要借助`&`符号一起配合使用。我们就拿经典的“clearfix”为例吧：
  .clearfix{
    &:before,
    &:after {
        content:"";
        display: table;
      }
    &:after {
        clear:both;
        overflow: hidden;
      }
  }
  编译出来的 CSS：
  clearfix:before, .clearfix:after {
    content: "";
    display: table;
  }
  .clearfix:after {
    clear: both;
    overflow: hidden;
  }
  避免选择器嵌套：
  选择器嵌套最大的问题是将使最终的代码难以阅读。开发者需要花费巨大精力计算不同缩进级别下的选择器具体的表现效果。
  选择器越具体则声明语句越冗长，而且对最近选择器的引用(&)也越频繁。在某些时候，出现混淆选择器路径和探索下一级选择器的错误率很高，这非常不值得。
  为了防止此类情况，我们应该尽可能避免选择器嵌套。然而，显然只有少数情况适应这一措施。
4. 混合宏-声明混合宏
  如果你的整个网站中有几处小样式类似，比如颜色，字体等，在 Sass 可以使用变量来统一处理，那么这种选择还是不错的。但当你的样式变得越来越复杂，
  需要重复使用大段的样式时，使用变量就无法达到我们目了。这个时候 Sass 中的混合宏就会变得非常有意义。在这一节中，主要向大家介绍 Sass 的混合宏。
  1、声明混合宏
  不带参数混合宏：
  在 Sass 中，使用“@mixin”来声明一个混合宏。如：
  @mixin border-radius{
    -webkit-border-radius: 5px;
    border-radius: 5px;
  }
  其中 @mixin 是用来声明混合宏的关键词，有点类似 CSS 中的 @media、@font-face 一样。border-radius 是混合宏的名称。大括号里面是复用的样式代码。
  带参数混合宏：
  除了声明一个不带参数的混合宏之外，还可以在定义混合宏时带有参数，如：
  @mixin border-radius($radius:5px){
    -webkit-border-radius: $radius;
    border-radius: $radius;
  }
  复杂的混合宏：
  上面是一个简单的定义混合宏的方法，当然， Sass 中的混合宏还提供更为复杂的，你可以在大括号里面写上带有逻辑关系，帮助更好的做你想做的事情,如：
  @mixin box-shadow($shadow...) {
  @if length($shadow) >= 1 {
    @include prefixer(box-shadow, $shadow);
  } @else{
    $shadow:0 0 4px rgba(0,0,0,.3);
    @include prefixer(box-shadow, $shadow);
  }
  }
  这个 box-shadow 的混合宏，带有多个参数，这个时候可以使用“ … ”来替代。简单的解释一下，当 $shadow 的参数数量值大于或等于“ 1 ”时，表示有多个阴影值，
  反之调用默认的参数值“ 0 0 4px rgba(0,0,0,.3) ”。
  注：复杂的混合宏中的逻辑关系（@if...@else）后面小节会有讲解。
5. 混合宏-调用混合宏
  在 Sass 中通过 @mixin 关键词声明了一个混合宏，那么在实际调用中，其匹配了一个关键词“@include”来调用声明好的混合宏。例如
  在你的样式中定义了一个圆角的混合宏“border-radius”:
  @mixin border-radius{
    -webkit-border-radius: 3px;
    border-radius: 3px;
  }
  在一个按钮中要调用定义好的混合宏“border-radius”，可以这样使用：
  button {
    @include border-radius;
  }
  这个时候编译出来的 CSS:
  button {
  -webkit-border-radius: 3px;
  border-radius: 3px;
  }
6. 混合宏的参数--传一个不带值的参数
  Sass 的混合宏有一个强大的功能，可以传参，那么在 Sass 中传参主要有以下几种情形：
  A) 传一个不带值的参数
  在混合宏中，可以传一个不带任何值的参数，比如：
  @mixin border-radius($radius){
    -webkit-border-radius: $radius;
    border-radius: $radius;
  }
  在混合宏“border-radius”中定义了一个不带任何值的参数“$radius”。
  在调用的时候可以给这个混合宏传一个参数值：
  .box {
    @include border-radius(3px);
  }
  这里表示给混合宏传递了一个“border-radius”的值为“3px”。
  编译出来的 CSS:
  .box {
    -webkit-border-radius: 3px;
    border-radius: 3px;
  }
7. 混合宏的参数--传一个带值的参数
  在 Sass 的混合宏中，还可以给混合宏的参数传一个默认值，例如：
  @mixin border-radius($radius:3px){
    -webkit-border-radius: $radius;
    border-radius: $radius;
  }
  在混合宏“border-radius”传了一个参数“$radius”，而且给这个参数赋予了一个默认值“3px”。
  在调用类似这样的混合宏时，会多有一个机会，假设你的页面中的圆角很多地方都是“3px”的圆角，那么这个时候只需要调用默认的混合宏“border-radius”:
  .btn {
    @include border-radius;
  }
  编译出来的 CSS:
  .btn {
    -webkit-border-radius: 3px;
    border-radius: 3px;
  }
  但有的时候，页面中有些元素的圆角值不一样，那么可以随机给混合宏传值，如：
  .box {
    @include border-radius(50%);
  }
  编译出来的 CSS:
  .box {
    -webkit-border-radius: 50%;
    border-radius: 50%;
  }
8. 混合宏的参数--传多个参数
  Sass 混合宏除了能传一个参数之外，还可以传多个参数，如：
  @mixin center($width,$height){
    width: $width;
    height: $height;
    position: absolute;
    top: 50%;
    left: 50%;
    margin-top: -($height) / 2;
    margin-left: -($width) / 2;
  }
  在混合宏“center”就传了多个参数。在实际调用和其调用其他混合宏是一样的：
  .box-center {
    @include center(500px,300px);
  }
  编译出来 CSS:
  .box-center {
    width: 500px;
    height: 300px;
    position: absolute;
    top: 50%;
    left: 50%;
    margin-top: -150px;
    margin-left: -250px;
  }
    有一个特别的参数“…”。当混合宏传的参数过多之时，可以使用参数来替代，如：
  @mixin box-shadow($shadows...){
    @if length($shadows) >= 1 {
      -webkit-box-shadow: $shadows;
      box-shadow: $shadows;
    } @else {
      $shadows: 0 0 2px rgba(#000,.25);
      -webkit-box-shadow: $shadow;
      box-shadow: $shadow;
    }
  }
  在实际调用中：
  .box {
    @include box-shadow(0 0 1px rgba(#000,.5),0 0 2px rgba(#000,.2));
  }
  编译出来的CSS:
  .box {
    -webkit-box-shadow: 0 0 1px rgba(0, 0, 0, 0.5), 0 0 2px rgba(0, 0, 0, 0.2);
    box-shadow: 0 0 1px rgba(0, 0, 0, 0.5), 0 0 2px rgba(0, 0, 0, 0.2);
  }
9. 混合宏的参数--混合宏的不足
  混合宏在实际编码中给我们带来很多方便之处，特别是对于复用重复代码块。但其最大的不足之处是会生成冗余的代码块。比如在不同的地方调用一个相同的混合宏时。如：
  @mixin border-radius{
    -webkit-border-radius: 3px;
    border-radius: 3px;
  }

  .box {
    @include border-radius;
    margin-bottom: 5px;
  }

  .btn {
    @include border-radius;
  }
  示例在“.box”和“.btn”中都调用了定义好的“border-radius”混合宏。先来看编译出来的 CSS：
  .box {
    -webkit-border-radius: 3px;
    border-radius: 3px;
    margin-bottom: 5px;
  }

  .btn {
    -webkit-border-radius: 3px;
    border-radius: 3px;
  }
  上例明显可以看出，Sass 在调用相同的混合宏时，并不能智能的将相同的样式代码块合并在一起。这也是 Sass 的混合宏最不足之处。
10. 扩展/继承
  在 Sass 中也是继承类中的样式代码块。在 Sass 中是通过关键词 “@extend”来继承已存在的类样式块，从而实现代码的继承。如下所示：
  //SCSS
  .btn {
    border: 1px solid #ccc;
    padding: 6px 10px;
    font-size: 14px;
  }

  .btn-primary {
    background-color: #f36;
    color: #fff;
    @extend .btn;
  }

  .btn-second {
    background-color: orange;
    color: #fff;
    @extend .btn;
  }
  编译出来之后：
  //CSS
  .btn, .btn-primary, .btn-second {
    border: 1px solid #ccc;
    padding: 6px 10px;
    font-size: 14px;
  }

  .btn-primary {
    background-color: #f36;
    color: #fff;
  }

  .btn-second {
    background-clor: orange;
    color: #fff;
  }
  从示例代码可以看出，在 Sass 中的继承，可以继承类样式块中所有样式代码，而且编译出来的 CSS 会将选择器合并在一起，形成组合选择器：
  .btn, .btn-primary, .btn-second {
    border: 1px solid #ccc;
    padding: 6px 10px;
    font-size: 14px;
  }
11. 占位符 %placeholder
  Sass 中的占位符 %placeholder 功能是一个很强大，很实用的一个功能，这也是我非常喜欢的功能。他可以取代以前 CSS 中的基类造成的代码冗余的情形。
  因为 %placeholder 声明的代码，如果不被 @extend 调用的话，不会产生任何代码。来看一个演示：
  %mt5 {
    margin-top: 5px;
  }
  %pt5{
    padding-top: 5px;
  }
  这段代码没有被 @extend 调用，他并没有产生任何代码块，只是静静的躺在你的某个 SCSS 文件中。只有通过 @extend 调用才会产生代码：
  //SCSS
  %mt5 {
    margin-top: 5px;
  }
  %pt5{
    padding-top: 5px;
  }

  .btn {
    @extend %mt5;
    @extend %pt5;
  }

  .block {
    @extend %mt5;

    span {
      @extend %pt5;
    }
  }
  编译出来的CSS
  //CSS
  .btn, .block {
    margin-top: 5px;
  }

  .btn, .block span {
    padding-top: 5px;
  }
  从编译出来的 CSS 代码可以看出，通过 @extend 调用的占位符，编译出来的代码会将相同的代码合并在一起。这也是我们希望看到的效果，也让你的代码变得更为干净。
12. 混合宏 VS 继承 VS 占位符
  //SCSS中混合宏使用
  @mixin mt($var){
    margin-top: $var;
  }

  .block {
    @include mt(5px);

    span {
      display:block;
      @include mt(5px);
    }
  }

  .header {
    color: orange;
    @include mt(5px);

    span{
      display:block;
      @include mt(5px);
    }
  }

  //SCSS 继承的运用
  .mt{
    margin-top: 5px;
  }

  .block {
    @extend .mt;

    span {
      display:block;
      @extend .mt;
    }
  }

  .header {
    color: orange;
    @extend .mt;

    span{
      display:block;
      @extend .mt;
    }
  }

  //SCSS中占位符的使用
  %mt{
    margin-top: 5px;
  }

  .block {
    @extend %mt;

    span {
      display:block;
      @extend %mt;
    }
  }

  .header {
    color: orange;
    @extend %mt;

    span{
      display:block;
      @extend %mt;
    }
  }
  a) Sass 中的混合宏使用
  举例代码见 2-24 行
  编译出来的 CSS 见右侧结果窗口。
  总结：编译出来的 CSS 清晰告诉了大家，他不会自动合并相同的样式代码，如果在样式文件中调用同一个混合宏，会产生多个对应的样式代码，造成代码的冗余，这也是 CSSer 无法忍受的一件事情。不过他并不是一无事处，他可以传参数。
  个人建议：如果你的代码块中涉及到变量，建议使用混合宏来创建相同的代码块。
  b) Sass 中继承
  同样的，将上面代码中的混合宏，使用类名来表示，然后通过继承来调用：
  代码见 26-48 行
  总结：使用继承后，编译出来的 CSS 会将使用继承的代码块合并到一起，通过组合选择器的方式向大家展现，比如 .mt, .block, .block span, .header, .header span。这样编译出来的代码相对于混合宏来说要干净的多，也是 CSSer 期望看到。但是他不能传变量参数。
  个人建议：如果你的代码块不需要专任何变量参数，而且有一个基类已在文件中存在，那么建议使用 Sass 的继承。
  c) 占位符
  最后来看占位符，将上面代码中的基类 .mt 换成 Sass 的占位符格式：
  代码见 50-72 行
  总结：编译出来的 CSS 代码和使用继承基本上是相同，只是不会在代码中生成占位符 mt 的选择器。那么占位符和继承的主要区别的，“占位符是独立定义，不调用的时候是不会在 CSS 中产生任何代码；继承是首先有一个基类存在，不管调用与不调用，基类的样式都将会出现在编译出来的 CSS 代码中。”
  来看一个表格：
                  混合宏                                 继承                         占位符
    声明方式       @mixin                                .class                    %placeholder
    调用方式       @include                              @extend                       @extend
    使用环境        $aa                                   $bb                           $cc

  $aa:如果相同代码块需要在不同的环境传递不同的值时，可以通过混合宏来定义重复使用的代码块。
      不足：就是编译出来的CSS代码什么出现调用的混合宏对应的代码块，使用文件变得臃肿，代码冗余。
  $bb:如果相同代码块不需要传递不同的值，并且此代码块已在SASS文件中定义，此进可以头你改过SASS的继承来调用已存在的基类，使用继承将会调用相同基类的代码合并在一起。
      不足：如果基类，并不存在于HTML结构时，不管调用与不调用，在编译出来的CSS中都将产生基类对应的样式代码。
  $cc:占位和继承基本类似，
      唯一不同的是，相同代码块并没有在基类中存中，而是额外声明。如果不调用已声明的占位符，将不会从产生任何样式代码，如果在不同选择器调用占位符，那么编译出来的CSS代码将会把相同的代码合并在一起。

http://www.imooc.com/code/7042
